import {
  Markdown
} from "./chunk-WDHLWSSU.mjs";
import {
  useChatContext
} from "./chunk-7LMXXGJT.mjs";

// src/components/chat/Messages.tsx
import React, { useEffect, useMemo } from "react";
import { nanoid } from "nanoid";
import { decodeResult } from "@copilotkit/shared";
import { useCopilotContext } from "@copilotkit/react-core";
import { jsx, jsxs } from "react/jsx-runtime";
var Messages = ({ messages, inProgress }) => {
  const { chatComponentsCache } = useCopilotContext();
  const context = useChatContext();
  const initialMessages = useMemo(
    () => makeInitialMessages(context.labels.initial),
    [context.labels.initial]
  );
  messages = [...initialMessages, ...messages];
  const functionResults = {};
  for (let i = 0; i < messages.length; i++) {
    if (messages[i].role === "assistant" && messages[i].function_call) {
      const id = messages[i].id;
      if (i + 1 < messages.length && messages[i + 1].role === "function") {
        functionResults[id] = decodeResult(messages[i + 1].content || "");
      }
    }
  }
  const messagesEndRef = React.useRef(null);
  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({
        behavior: "auto"
      });
    }
  };
  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  return /* @__PURE__ */ jsxs("div", { className: "copilotKitMessages", children: [
    messages.map((message, index) => {
      var _a, _b, _c;
      const isCurrentMessage = index === messages.length - 1;
      if (message.role === "user") {
        return /* @__PURE__ */ jsx("div", { className: "copilotKitMessage copilotKitUserMessage", children: message.content }, index);
      } else if (message.role == "assistant") {
        if (isCurrentMessage && inProgress && !message.content && !message.partialFunctionCall) {
          return /* @__PURE__ */ jsx("div", { className: `copilotKitMessage copilotKitAssistantMessage`, children: context.icons.spinnerIcon }, index);
        } else if (message.function_call || message.partialFunctionCall) {
          const functionCallName = ((_a = message.function_call) == null ? void 0 : _a.name) || ((_b = message.partialFunctionCall) == null ? void 0 : _b.name);
          if (chatComponentsCache.current !== null && chatComponentsCache.current[functionCallName]) {
            const render = chatComponentsCache.current[functionCallName];
            if (typeof render === "string") {
              if (isCurrentMessage && inProgress) {
                return /* @__PURE__ */ jsxs("div", { className: `copilotKitMessage copilotKitAssistantMessage`, children: [
                  context.icons.spinnerIcon,
                  " ",
                  /* @__PURE__ */ jsx("span", { className: "inProgressLabel", children: render })
                ] }, index);
              } else {
                return null;
              }
            } else {
              const args = message.function_call ? JSON.parse(message.function_call.arguments || "{}") : (_c = message.partialFunctionCall) == null ? void 0 : _c.arguments;
              let status = "inProgress";
              if (functionResults[message.id] !== void 0) {
                status = "complete";
              } else if (message.function_call) {
                status = "executing";
              }
              const toRender = render({
                status,
                args,
                result: functionResults[message.id]
              });
              if (!toRender && status === "complete") {
                return null;
              }
              if (typeof toRender === "string") {
                return /* @__PURE__ */ jsxs("div", { className: `copilotKitMessage copilotKitAssistantMessage`, children: [
                  isCurrentMessage && inProgress && context.icons.spinnerIcon,
                  " ",
                  toRender
                ] }, index);
              } else {
                return /* @__PURE__ */ jsx("div", { className: "copilotKitCustomAssistantMessage", children: toRender }, index);
              }
            }
          } else if ((!inProgress || !isCurrentMessage) && message.function_call) {
            return null;
          } else {
            return /* @__PURE__ */ jsx("div", { className: `copilotKitMessage copilotKitAssistantMessage`, children: context.icons.spinnerIcon }, index);
          }
        }
        return /* @__PURE__ */ jsx("div", { className: `copilotKitMessage copilotKitAssistantMessage`, children: /* @__PURE__ */ jsx(Markdown, { content: message.content }) }, index);
      }
    }),
    /* @__PURE__ */ jsx("div", { ref: messagesEndRef })
  ] });
};
function makeInitialMessages(initial) {
  let initialArray = [];
  if (initial) {
    if (Array.isArray(initial)) {
      initialArray.push(...initial);
    } else {
      initialArray.push(initial);
    }
  }
  return initialArray.map((message) => ({
    id: nanoid(),
    role: "assistant",
    content: message
  }));
}

export {
  Messages
};
//# sourceMappingURL=chunk-73EBDGYK.mjs.map