{"version":3,"sources":["../src/components/chat/Messages.tsx"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport { MessagesProps } from \"./props\";\nimport { useChatContext } from \"./ChatContext\";\nimport { nanoid } from \"nanoid\";\nimport { Message, decodeResult } from \"@copilotkit/shared\";\nimport { Markdown } from \"./Markdown\";\nimport { ActionRenderProps, RenderFunctionStatus, useCopilotContext } from \"@copilotkit/react-core\";\n\nexport const Messages = ({ messages, inProgress }: MessagesProps) => {\n  const { chatComponentsCache } = useCopilotContext();\n  const context = useChatContext();\n  const initialMessages = useMemo(\n    () => makeInitialMessages(context.labels.initial),\n    [context.labels.initial],\n  );\n  messages = [...initialMessages, ...messages];\n\n  const functionResults: Record<string, string> = {};\n\n  for (let i = 0; i < messages.length; i++) {\n    if (messages[i].role === \"assistant\" && messages[i].function_call) {\n      const id = messages[i].id;\n      if (i + 1 < messages.length && messages[i + 1].role === \"function\") {\n        functionResults[id] = decodeResult(messages[i + 1].content || \"\");\n      }\n    }\n  }\n\n  const messagesEndRef = React.useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"auto\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  return (\n    <div className=\"copilotKitMessages\">\n      {messages.map((message, index) => {\n        const isCurrentMessage = index === messages.length - 1;\n\n        if (message.role === \"user\") {\n          return (\n            <div key={index} className=\"copilotKitMessage copilotKitUserMessage\">\n              {message.content}\n            </div>\n          );\n        } else if (message.role == \"assistant\") {\n          if (isCurrentMessage && inProgress && !message.content && !message.partialFunctionCall) {\n            // The message is in progress and there is no content- show the spinner\n            return (\n              <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n                {context.icons.spinnerIcon}\n              </div>\n            );\n          } else if (message.function_call || message.partialFunctionCall) {\n            // Find the action that corresponds to the function call if any\n            const functionCallName: string = (message.function_call?.name ||\n              message.partialFunctionCall?.name)!;\n            if (\n              chatComponentsCache.current !== null &&\n              chatComponentsCache.current[functionCallName]\n            ) {\n              const render = chatComponentsCache.current[functionCallName];\n\n              // render a static string\n              if (typeof render === \"string\") {\n                // when render is static, we show it only when in progress\n                if (isCurrentMessage && inProgress) {\n                  return (\n                    <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n                      {context.icons.spinnerIcon} <span className=\"inProgressLabel\">{render}</span>\n                    </div>\n                  );\n                }\n                // Done - silent by default to avoid a series of \"done\" messages\n                else {\n                  return null;\n                }\n              }\n              // render is a function\n              else {\n                const args = message.function_call\n                  ? JSON.parse(message.function_call.arguments || \"{}\")\n                  : message.partialFunctionCall?.arguments;\n\n                let status: RenderFunctionStatus = \"inProgress\";\n\n                if (functionResults[message.id] !== undefined) {\n                  status = \"complete\";\n                } else if (message.function_call) {\n                  status = \"executing\";\n                }\n\n                const toRender = render({\n                  status: status as any,\n                  args,\n                  result: functionResults[message.id],\n                });\n\n                // No result and complete: stay silent\n                if (!toRender && status === \"complete\") {\n                  return null;\n                }\n\n                if (typeof toRender === \"string\") {\n                  return (\n                    <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n                      {isCurrentMessage && inProgress && context.icons.spinnerIcon} {toRender}\n                    </div>\n                  );\n                } else {\n                  return (\n                    <div key={index} className=\"copilotKitCustomAssistantMessage\">\n                      {toRender}\n                    </div>\n                  );\n                }\n              }\n            }\n            // No render function found- show the default message\n            else if ((!inProgress || !isCurrentMessage) && message.function_call) {\n              // Done - silent by default to avoid a series of \"done\" messages\n              return null;\n            } else {\n              // In progress\n              return (\n                <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n                  {context.icons.spinnerIcon}\n                </div>\n              );\n            }\n          }\n\n          return (\n            <div key={index} className={`copilotKitMessage copilotKitAssistantMessage`}>\n              <Markdown content={message.content} />\n            </div>\n          );\n        }\n      })}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n};\n\nfunction makeInitialMessages(initial?: string | string[]): Message[] {\n  let initialArray: string[] = [];\n  if (initial) {\n    if (Array.isArray(initial)) {\n      initialArray.push(...initial);\n    } else {\n      initialArray.push(initial);\n    }\n  }\n\n  return initialArray.map((message) => ({\n    id: nanoid(),\n    role: \"assistant\",\n    content: message,\n  }));\n}\n"],"mappings":"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","names":[]}